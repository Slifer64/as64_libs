function [Y,Xf,Af] = mackeyGlassNN(X,Xi,~)
%MACKEYGLASSNN neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Jul-2019 19:00:26.
% 
% [Y,Xf,Af] = mackeyGlassNN(X,Xi,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
%   Xi = 1x7 cell 1, initial 7 input delay states.
%   Each Xi{1,ts} = 1xQ matrix, initial states for input #1.
% 
%   Ai = 2x0 cell 2, initial 7 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
%   Xf = 1x7 cell 1, final 7 input delay states.
%   Each Xf{1,ts} = 1xQ matrix, final states for input #1.
% 
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 0.244836803078055;
x1_step1.gain = 1.75966317187718;
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.136272389047603415;-0.48117304941568539434;0.26125737150176947532;-0.035866317286790502794;-0.47669399633500825209;1.020137261851191246;0.96668143691714480958;-1.0792492046220305557;1.5566777790998687081;-2.1119426503811724594];
IW1_1 = [0.61653061180008617015 -0.72789306904218886718 0.44793710767746303114 -0.28721636458346305742 0.35805543534218225998 2.6151809644293280144 0.19408125468275697068;0.80089704514102255661 -0.29112978698547903322 0.55438358862626124779 -0.22497202578409539186 -0.52930461801601313976 0.43908581333463486684 -0.016088384618852945296;-0.18962591593544830815 0.26263933141921469439 -0.13859037118922953868 0.055476950768589397556 -0.076791693046650469356 0.63076005648557209593 0.009174802301233086349;-0.41085997662181905632 0.24612817481855034374 -0.0054629582601450690782 0.18204064891593499387 -0.37041801591820444628 0.13288782354090042381 0.33825151595918229175;0.77026756205502211472 -0.36847065600987410905 0.20628151840970607167 0.059956648124289288471 0.014124992672627356 -0.32888165198313867865 0.22921540169245013807;-0.012136994308495763564 0.026943921323360351533 -0.02496419934996745027 0.0095282276743398931773 -0.0052990780285434753438 -3.0930645828651233131 -0.0044249987979422221451;0.19830565191867038921 0.95530898350620374604 0.40702627551916192861 0.074610711752780820016 0.56095976951319137527 -0.25376241605230936971 0.046928707539024144824;-1.4036081810694671645 0.58720934926983403557 -0.35718726561810065778 -0.0036218752389787466084 0.10658080822957950728 0.34874726988048265763 -0.35847684278734548435;-0.32213457339388334999 -0.47770799633558913566 -0.55258038472827486487 1.0039576375500531835 -1.5497147492042411265 -0.080712535722066644506 -1.1305121355509686332;-0.14308330573233493666 0.28641582053608499736 -0.77440945603345867632 0.88522123402142616211 0.60999522829672292445 -0.99094778642070013852 0.55262764960888421939];

% Layer 2
b2 = -0.64896816375509480679;
LW2_1 = [-0.20829066231626072736 0.15728249153829765294 1.7233121369006374479 -0.55602145699836269532 0.68730143590081194116 0.66805132695001301357 0.0071002563846475899231 -0.32533841281067571449 -0.021772735028006407615 -0.040324630404046185594];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1.75966317187718;
y1_step1.xoffset = 0.244836803078055;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
  Q = size(Xi{1},2);
else
  Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,8);
for ts=1:7
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+6,8)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2 3 4 5 6 7]-1,8)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 7);
xits = finalxts(finalxts<=7);
xts = finalxts(finalxts>7)-7;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
