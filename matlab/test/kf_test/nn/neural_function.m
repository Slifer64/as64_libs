function [Y,Xf,Af] = neural_function(X,Xi,~)
%NEURAL_FUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Jul-2019 17:32:55.
% 
% [Y,Xf,Af] = neural_function(X,Xi,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
%   Xi = 1x31 cell 1, initial 31 input delay states.
%   Each Xi{1,ts} = 1xQ matrix, initial states for input #1.
% 
%   Ai = 2x0 cell 2, initial 31 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
%   Xf = 1x31 cell 1, final 31 input delay states.
%   Each Xf{1,ts} = 1xQ matrix, final states for input #1.
% 
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 0.289817342892482;
x1_step1.gain = 1.35091036311899;
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.67097269794098057805;-0.90607375137562218281;1.3189457886460982383;-0.55112108088023714636;-0.11357711829803361636;-0.16582571011249716553;-0.032080454864837515405;0.54051269398696832891;-0.78657689293018562271;0.97510294213628212479];
IW1_1 = [0.08773390433603012184 -0.7596803010813889534 0.2596425267478158494 0.5002930697297897078 -0.033885562239240704652 -0.10904598733602062499 0.21227657152177706323 0.15636468831522840062 0.025821967503409211375 -0.019260302354080903464 0.058484325372335790871 0.058383585639786308996 -0.2608651219494454998 -0.14545303500288042642 0.3283485910416881759 0.053146508153139482289 -0.41657895066897193681 0.19633686290614177361 0.18046989206506031111 -0.025298099267581024285 -0.039941754421532735253 -0.15564219694913042358 0.44407909948453883064 -0.29925585056624798286 0.049220115937029768061 -0.094676702208498553226 -0.037090184963167377452 -0.037690799074594487361 -0.00976852272970129068 0.15623536070742161108 -0.012496203447892631835;0.54879259057878737593 -0.012753023197163331284 0.054646739455186492396 0.076385136716111870503 -0.15443008624039489263 0.17235560294289478667 -0.43412789662713369143 -0.087781409815840621969 0.15456020670368844638 0.28936865100599190592 -0.039796072702222816397 -0.28899740966452830415 0.32039809938654073562 -0.44711941730236570702 0.038376688384363859263 -0.0041495240714559114212 0.30993414803571961436 -0.081648881732375486187 0.053754758510637802582 -0.28431004758253930476 0.2714677907791889222 0.22703255285945650455 0.41381232576118370803 -0.41223387532748662077 -0.57736660724619170981 -0.29147075651469350754 -0.11232006950556719382 -0.071224415907667926184 0.18419132991793582543 -0.45154196011194075444 0.039108307636170631938;0.22751952629925181748 -0.61088972775704442064 -0.11810437364459218379 -0.23581619651574703411 -0.079226993205653364893 -0.28487777131759289828 0.4659142388510340016 0.47903655582623883014 0.13838112225214366235 0.26284976079714206243 -0.034162101581938379702 -0.43253236811757894698 -0.43477842163235425055 0.26161405217726851902 0.024548327975285971769 -0.15869541731037750676 -0.2465648531472297289 0.34422197546145472113 0.43109761385819189705 -0.1955183467178600587 0.26550253242898708139 -0.051635160847305162923 0.25641472341189008866 -0.17566244582764758975 -0.12340454592962242508 -0.31875422428998617663 -0.53781444526578914278 -0.034429618780484907981 -0.049849653768707043178 0.23970463896323596087 0.70343963349235549831;0.5597059489895043205 0.077390605433292486426 0.026316572350553135012 -0.1649870174781057075 -0.17924509359157461685 0.14022363423876330057 -0.35985245907821000744 -0.071860059626235012198 0.19095343242983187082 -0.42427567793964449105 0.32120768981797165331 -0.32963363764903330644 -0.31344027691747594622 0.19712407010055854606 0.16532265838258755619 -0.081684825452495668507 -0.28289216972484632073 0.26796758471117981815 0.011569449478988462487 0.20365678597574149444 -0.25226900553923675696 0.37454036098358650664 -0.25680080694293411225 -0.28688088175344289565 -0.32244084258985306057 -0.29870734400783344187 -0.22216066767777234436 -0.18987842876401531123 0.29434253490583867086 0.30285007804260055675 0.61692357864379110399;-0.30587482241047164733 0.11943998581320652841 0.43922520840825945987 0.10457707186551433443 0.049192439339886852301 -0.044529209337886010989 -0.25854963743541609089 0.34466971580580546552 -0.15017885557602231317 0.10231056084317960431 -0.096116330809057112794 -0.2015401957591964055 -0.11549753541709507909 -0.31277533608747176697 0.30336119419997387148 0.24538442941562607635 0.17755327243466506593 -0.11626806725084842808 -0.5107879684597581571 0.008791514441634805388 0.18342536535007400444 0.29137611531570589696 -0.43414168047386592075 0.35796699141397103627 -0.023765900559627513994 -0.27835030146796624351 -0.021769249532854126339 0.1136682552967364368 -0.33854285601307021469 -0.13304669542494140799 0.36762623781913456034;-0.032496507946663484578 -0.29116795663071798339 -0.27593400215725877311 -0.27930981015793304723 -0.21137400991348065382 0.086963737958395875838 0.74659211721216911517 0.23662871503378535287 0.53524488526464364391 -0.10295111519853428206 -0.2062612797631264705 -0.37572719279822008875 -0.034717947184507901015 -0.16204682473209008897 0.32290615279174372798 0.3277246214989973927 -0.44230767838527235147 0.035361447874068620278 -0.28312432456055192098 0.34431541426736628209 -0.045436063693742180514 0.41019043257627235688 0.088267305051793462645 -0.024858996223458808272 -0.11619722493205432434 -0.25003500154754210172 -0.26795937427931904029 -0.96559854199812322761 -0.8828042443141866924 -0.80191254783879528656 -1.1682148604129194425;-0.94165813840332401874 -0.0039793012020956737215 -0.057792300884021985397 0.86114843166907872885 -0.050017310713033745484 0.15094114227506680304 -0.2238285985193125549 0.082397907767914127519 0.33556754752395812069 0.093823886799450889606 -0.20627430100620242071 -0.19576192285660171111 -0.16038074766243520797 0.03427720636838646473 0.29057228546626828747 0.079244613536964284006 -0.23335563582438742514 0.07649396197279562104 0.075994131408730555832 -0.024378011629684455397 -0.46328253963999249665 0.40373490568717340654 0.25970692135523254507 -0.21204643649553844842 -0.058816982197547829081 -0.015928160677079142987 -0.28345757176115643494 0.35778611361238027433 -0.1758032919068907296 0.34540075964013433607 0.25653922304026260948;0.036378580326062136263 0.52924804286985471791 -0.047544569767453866149 0.086279341455164984542 -0.14014116149860406102 0.22560738889510154048 -0.21970362206480956169 -0.084557958697956334126 0.0091771621801443777067 -0.15952455520074557138 0.061289850819228879064 0.20372024717816730743 -0.0061466499713361752444 0.14317653991167145211 -0.39101523376065400184 0.13709199293356574834 0.38488866699916995939 -0.40664897844827802009 0.1139264504872699868 -0.037959620053199034928 -0.26827731150723971298 0.3765902377546236357 -0.036368516427648857336 -0.047202967395379227811 -0.28557817150645853355 0.29158245415893779828 0.089556353485027537231 -0.17282848816685456028 0.12850689775289234063 0.24101371244487360124 0.034735290070523519579;0.097336900206640639133 0.23049573719593610677 0.078159006828679974954 0.20849567830629192611 -0.37832704924168586436 -0.038168739590968205067 -0.17182686509423591992 -0.081262335733961438278 -0.24977058042031582974 -0.24071867963551760172 0.32631846388736068798 0.19314179832711306228 -0.045617570881876498556 -0.11966548286544050061 0.00022810698832287357434 -0.026703922712744659895 0.15276666975957819972 0.013333521893464253191 -0.32047166223626877279 -0.062526745425169075188 0.21994435138488041548 0.14266900940012325338 -0.12306132564576392763 -0.087261677169206144922 -0.29552844078751910883 0.29043093343308667986 0.073940644559190568663 -0.15321194977730467901 -0.052584005107988246452 0.27233228522834379559 0.037786374438095876593;-0.92236365170620959741 0.10823543679375834115 0.56992540392531343407 -0.51982832797654776602 -0.19082041672368199592 0.18478863679862939096 0.26849935684128889424 0.40525263873467365361 -0.18517509544677684952 -0.19989479396818876644 0.27445984978412457655 0.053773927432681896399 -0.31374053193025663866 0.0082638147942482587105 -0.38888023272064520253 0.45084134263152420008 0.20129695092205121543 -0.5382604725812141222 0.36198648365583829811 0.038737244109164924166 0.0069855800165237579707 0.040692388025415339448 -0.031158666177950024301 0.12407533633208529811 -0.14985459914195320419 -0.10178703327363053388 0.10266598245943722723 -0.22847118210608743927 -0.17704266813686009296 -0.042400539763933264847 0.1711690638203650916];

% Layer 2
b2 = 0.23435863712149093696;
LW2_1 = [1.2782732752310703717 -0.13121123161770939514 0.45034413746536106071 0.063100908066384478468 0.46725264389260451336 0.056619226932262095575 -0.86305408011510942323 1.1196129851543614731 -0.80152367432056437213 -1.2883474280689208857];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1.35091036311899;
y1_step1.xoffset = 0.289817342892482;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
  Q = size(Xi{1},2);
else
  Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,32);
for ts=1:31
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+30,32)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]-1,32)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 31);
xits = finalxts(finalxts<=31);
xts = finalxts(finalxts>31)-31;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
